package schools;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import static java.util.stream.Collectors.*;
public class Region {
	private String name;
	Map<String, School> schools = new TreeMap<>();
	Map<Integer, Branch> branches = new TreeMap<>();
	Map<String, Community> commies = new TreeMap<>();
	Map<String, Municipality> munis = new TreeMap<>();	
	public String getName(){return name;}
	public Region(String name){this.name = name;}
	public Collection<School> getSchools(){return schools.values();}
	public Collection<Community> getCommunities(){return commies.values();}
	public Collection<Municipality> getMunicipalies(){return munis.values();}
	public Community newCommunity(String name, Community.Type type){
		if(commies.containsKey(name)) return commies.get(name);
		commies.put(name, new Community(name, type));
		return commies.get(name);
	}
	public Municipality newMunicipality(String nome, String province){
		if(munis.containsKey(nome)) return munis.get(nome);
		munis.put(nome, new Municipality(nome, province, null));
		return munis.get(nome);
	}
	public Municipality newMunicipality(String nome, String province, Community comunita){
		if(munis.containsKey(nome)) return munis.get(nome);
		Municipality temp = new Municipality(nome, province, comunita);
		comunita.addMuni(temp);
		munis.put(nome, temp);		
		return munis.get(nome);
	}
	public School newSchool(String name, String code, int grade, String description){
		School temp = new School(name, code, grade, description);
		schools.put(code, temp);
		return schools.get(code);
	}
	public Branch newBranch(int regionalCode, Municipality m,String address, int zipCode, School school){ 
		Branch temp = new Branch(regionalCode, m, address, zipCode, school);
		branches.put(regionalCode,temp); school.addBranch(temp);
		return branches.get(regionalCode);
	}
	public void readData(String file){
		List<String> lines = new ArrayList<>();
		List<String> elements = new ArrayList<>();
		try(BufferedReader in = new BufferedReader(new FileReader(file))){lines = in.lines().collect(toList());
		}catch(IOException e){System.err.println(e.getMessage());}
		for(int i = 1; i < lines.size(); i++){
			elements = Arrays.asList(lines.get(i).split(","));
			if(elements.size() == 11 && !elements.get(10).isEmpty()) {
				commies.put(elements.get(10),newCommunity(elements.get(10), Community.Type.MONTANA));
				munis.put(elements.get(1),newMunicipality(elements.get(1),elements.get(0),commies.get(elements.get(10))));
			}else if(elements.size() == 10){
				commies.put(elements.get(9),newCommunity(elements.get(9), Community.Type.COLLINARE));
				munis.put(elements.get(1),newMunicipality(elements.get(1),elements.get(0),commies.get(elements.get(9))));
			}else if(elements.size() == 9) munis.put(elements.get(1), newMunicipality(elements.get(1), elements.get(0)));
			if(!schools.containsKey(elements.get(5))) schools.put(elements.get(5),newSchool(elements.get(6), elements.get(5),Integer.parseInt(elements.get(2)), elements.get(3)));
			branches.put(Integer.parseInt(elements.get(4)),newBranch(Integer.parseInt(elements.get(4)),munis.get(elements.get(1)),elements.get(7),Integer.parseInt(elements.get(8)),schools.get(elements.get(5))));
		}
	}
	public Map<String,Long>countSchoolsPerDescription(){return schools.values().stream().collect(Collectors.groupingBy(x->((School)x).getDescription(),Collectors.counting()));}
	public Map<String,Long>countBranchesPerMunicipality(){return branches.values().stream().collect(Collectors.groupingBy(x->((Branch)x).getMunicipality().getName(),Collectors.counting()));}
	public Map<String,Map<String,Long>>countBranchesPerMunicipalityPerProvince(){
		return schools.values().stream()
				.map(School::getBranches)
				.flatMap(Collection::stream)
	/////			.collect(groupingBy(s->s.getMunicipality().getProvince(),groupingBy(s->s.getMunicipality().getName(),counting())));
				.collect(groupingBy(s->s.))
	}
	public Collection<String> countSchoolsPerMunicipality(){
		return schools.values().stream()
				.map(School::getBranches)
				.flatMap(Collection::stream)
				.collect(groupingBy(s->((Branch)s).getMunicipality().getName(),mapping(Branch::getSchool,collectingAndThen(toSet(), Set::size))))
				.entrySet().stream()
				.map(e -> e.getValue()+" - "+e.getKey())
				.collect(toList());
	}
	public List<String> countSchoolsPerCommunity(){
		return schools.values().stream()
				.map(School::getBranches)
				.flatMap(Collection::stream)
				.filter(s->s.getMunicipality().getCommunity().isPresent())
				.collect(groupingBy(s->s.getMunicipality().getCommunity().get().getName(),mapping(Branch::getSchool,collectingAndThen(toSet(), Set::size))))
				.entrySet().stream()
				.sorted(Comparator.comparing(Map.Entry::getValue,Comparator.reverseOrder()))
				.map(e -> e.getValue()+ " - "+e.getKey())
				.collect(toList());
	}
}