package clinic;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;
public class Clinic {
	Map<String, Patient> sick = new TreeMap<>();
	Map<Integer, Doctor> docs = new TreeMap<>();
	public void addPatient(String first, String last, String ssn) {	if(!sick.containsKey(ssn)) sick.put(ssn, new Patient(first,last,ssn));}
	public String getPatient(String ssn) throws NoSuchPatient {if(!sick.containsKey(ssn)) throw new NoSuchPatient();return sick.get(ssn).toString();}
	public void addDoctor(String first, String last, String ssn, int docID, String specialization){if(!docs.containsKey(docID)) docs.put(docID, new Doctor(first, last, ssn,docID,specialization));}
	public String getDoctor(int docID) throws NoSuchDoctor {if(!docs.containsKey(docID)) throw new NoSuchDoctor();return docs.get(docID).toString();}
	public void assignPatientToDoctor(String ssn, int docID) throws NoSuchPatient, NoSuchDoctor {
		if(!sick.containsKey(ssn)) throw new NoSuchPatient();
		if(!docs.containsKey(docID)) throw new NoSuchDoctor();
		docs.get(docID).addPatient(sick.get(ssn));
		sick.get(ssn).setDoc(docs.get(docID));
	}
	public int getAssignedDoctor(String ssn) throws NoSuchPatient, NoSuchDoctor {
		if(!sick.containsKey(ssn)) throw new NoSuchPatient();
		if(sick.get(ssn).getDoc() == null) throw new NoSuchDoctor();
		return sick.get(ssn).getDoc().getID();
	}
	public Collection<String> getAssignedPatients(int id) throws NoSuchDoctor {if(!docs.containsKey(id)) throw new NoSuchDoctor();	return docs.get(id).getPatients();}
	public void loadData(Reader reader) throws IOException {
		String text; 
		while((text = (new BufferedReader(reader)).readLine()) !=  null) {
			String[] lineElements = text.split(";");
			if(lineElements.length == 4) addPatient(lineElements[1].trim(), lineElements[2].trim(), lineElements[3].trim());
			else if(lineElements.length == 6) addDoctor(lineElements[2].trim(), lineElements[3],lineElements[4].trim(),Integer.parseInt(lineElements[1]),lineElements[5].trim());
		}	
	}
	/**
	 * Retrieves the collection of doctors that have no patient at all, sorted in alphabetic order.
	 * 
	 * @return the collection of doctors with no patient sorted in alphabetic order (last name and then first name)
	 */
	public Collection<Integer> idleDoctors(){
		return docs.values().stream()
		.filter(x->((Doctor)x).getPatients().isEmpty())
		.sorted(Comparator.comparing(Doctor::toString))
		.map(Doctor::getID)
		.collect(Collectors.toList());
	}

	/**
	 * Retrieves the collection of doctors having a number of patients larger than the average.
	 * 
	 * @return  the collection of doctors
	 */
	public Collection<Integer> busyDoctors(){
		// TODO Complete method
		return null;
	}

	/**
	 * Retrieves the information about doctors and relative number of assigned patients.
	 * <p>
	 * The method returns list of strings formatted as "{@code ### : ID SURNAME NAME}" where {@code ###}
	 * represent the number of patients (printed on three characters).
	 * <p>
	 * The list is sorted by decreasing number of patients.
	 * 
	 * @return the collection of strings with information about doctors and patients count
	 */
	public Collection<String> doctorsByNumPatients(){
		// TODO Complete method
		return null;
	}
	
	/**
	 * Retrieves the number of patients per (their doctor's)  specialization 
	 * <p>
	 * The information is a collections of strings structured as {@code ### - SPECIALITY}
	 * where {@code SPECIALITY} is the name of the speciality and 
	 * {@code ###} is the number of patients cured by doctors with such speciality (printed on three characters).
	 * <p>
	 * The elements are sorted first by decreasing count and then by alphabetic specialization.
	 * 
	 * @return the collection of strings with specialization and patient count information.
	 */
	public Collection<String> countPatientsPerSpecialization(){
		// TODO Complete method
		return null;
	}
	
}
